@page "/"
@using DevEngine.Core.Class
@using DevEngine.Core.Graph
@using DevEngine.FakeTypes.Class
@using DevEngine.FakeTypes.Method
@using DevEngine.FakeTypes.Project
@using DevEngine.Graph
@using Microsoft.Extensions.DependencyInjection

@inject Services.ConsoleService ConsoleService

<div style="height: 100vh; width: 100vw; overflow: hidden">

    <RightClickController @ref="RightClickController"></RightClickController>

    @if (RightClickController != null)
    {
        <CascadingValue TValue="RightClickController" Value="RightClickController" IsFixed="true">

            <div style="display: flex; flex-direction: column; min-width: 0; height: 100%; width: 100%">

                <DevEngine.UI.Controls.TopMenu OnSaveRequested="Save" OnRunRequested="Run"></DevEngine.UI.Controls.TopMenu>

                <div style="display: flex; flex-direction: row; height: 85%; width: 100%; overflow-y: hidden">
                    <DevEngine.UI.Controls.SolutionExplorer OnOpenClassRequested="OnOpenClassRequested"></DevEngine.UI.Controls.SolutionExplorer>

                    <DevEngine.UI.Controls.ClassesEditor @ref="ClassesEditor"></DevEngine.UI.Controls.ClassesEditor>
                </div>

                <div style="height: 15%; width: 100%">

                    <DevEngine.UI.Controls.ConsoleViewer />

                </div>
            </div>

        </CascadingValue>
    }

</div>

@code {

    private RightClickController? RightClickController { get; set; }

    private DevEngine.UI.Controls.ClassesEditor? ClassesEditor;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
            StateHasChanged(); // force the re-render, now that we have the right click controller we can render the rest of the app... sigh..
    }

    private void OnOpenClassRequested(FakeTypes.Class.DevClass devClass)
    {
        ClassesEditor?.OpenClass(devClass);
    }

    private void Save()
    {
        Program.Project.Save(Program.Folder, true);
    }

    private void Run()
    {
        var evaluator = new Evaluator.DevGraphEvaluator();


        var previousOut = Console.Out;
        var builder = new System.Text.StringBuilder();
        var writer = new System.IO.StringWriter(builder);
        Console.SetOut(writer);

        Program.Project.RunAsConsole(evaluator, ConsoleService);

        var str = builder.ToString();

        Console.SetOut(previousOut);

    }

}

