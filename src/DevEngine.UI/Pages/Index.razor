@page "/"
@using DevEngine.Core.Class
@using DevEngine.Core.Graph
@using DevEngine.FakeTypes.Class
@using DevEngine.FakeTypes.Method
@using DevEngine.FakeTypes.Project
@using DevEngine.Graph
@using Microsoft.Extensions.DependencyInjection

<div style="height: 100vh; width: 100vw; overflow: hidden">

    <RightClickController @ref="RightClickController"></RightClickController>

    @if (RightClickController != null)
    {
        <CascadingValue TValue="RightClickController" Value="RightClickController" IsFixed="true">

            <div style="display: flex; flex-direction: row; height: 100%">
                <DevEngine.UI.Controls.SolutionExplorer OnOpenClassRequested="OnOpenClassRequested"></DevEngine.UI.Controls.SolutionExplorer>

                <DevEngine.UI.Controls.ClassesEditor @ref="ClassesEditor"></DevEngine.UI.Controls.ClassesEditor>
            </div>

        </CascadingValue>
    }

</div>

@code {

    private RightClickController? RightClickController { get; set; }

    private DevEngine.UI.Controls.ClassesEditor? ClassesEditor;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
            StateHasChanged(); // force the re-render, now that we have the right click controller we can render the rest of the app... sigh..
    }

    private void OnOpenClassRequested(FakeTypes.Class.DevClass devClass)
    {
        ClassesEditor?.OpenClass(devClass);
    }



}

