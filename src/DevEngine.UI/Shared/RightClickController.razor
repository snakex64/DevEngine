@if (CurrentlyDisplayedMenuItems != null || CurrentlyDisplayedRenderFragment != null)
{
	<div style="height: 100vh; width: 100vw; position: absolute; z-index: 1000" @onclick="BackgroundClicked">
		<div style="position: absolute; left: @(MenuX)px; top: @(MenuY)px">

			@if (CurrentlyDisplayedMenuItems != null)
			{

				<Dropdown Visible="true">
					<DropdownMenu>
						@foreach (var menuItem in CurrentlyDisplayedMenuItems)
						{
							<DropdownItem Clicked="() => ItemClick(menuItem)">@menuItem.Name</DropdownItem>
						}
					</DropdownMenu>
				</Dropdown>
			}
			else if(CurrentlyDisplayedRenderFragment != null)
			{
				@CurrentlyDisplayedRenderFragment
			}
		</div>
	</div>
}



@code {

	public class MenuItem
	{
		public MenuItem(string name, Action callback)
		{
			Name = name;
			Callback = callback;
		}

		public string Name { get; set; }

		public Action Callback { get; set; }
	}

	private List<MenuItem>? CurrentlyDisplayedMenuItems { get; set; }
	public double MenuX { get; private set; }
	public double MenuY { get; private set; }

	private RenderFragment? CurrentlyDisplayedRenderFragment { get; set; }

	private void BackgroundClicked()
	{
		CloseRightClickMenu();
	}

	public void DisplayRightClickMenu(MouseEventArgs mouseEventArgs, List<MenuItem> menuItems)
	{
		CurrentlyDisplayedMenuItems = menuItems;
		CurrentlyDisplayedRenderFragment = null;
		MenuX = mouseEventArgs.ClientX;
		MenuY = mouseEventArgs.ClientY;

		StateHasChanged();
	}

	public void DisplayRightClickMenu(MouseEventArgs mouseEventArgs, RenderFragment renderFragment)
	{
		CurrentlyDisplayedMenuItems = null;
		CurrentlyDisplayedRenderFragment = renderFragment;
		MenuX = mouseEventArgs.ClientX;
		MenuY = mouseEventArgs.ClientY;

		StateHasChanged();
	}

	public void CloseRightClickMenu()
	{
		CurrentlyDisplayedMenuItems = null;
		CurrentlyDisplayedRenderFragment = null;
		StateHasChanged();
	}


	private void ItemClick(MenuItem item)
	{
		CloseRightClickMenu();
		item.Callback();
	}

}
